<p>WIP. Currently supports <code>Network</code> only.</p>

<h3>Quick example</h3>

{{#visjs-network options=networkOptions backgroundImage='wp.png' backgroundOffsetX=-600 backgroundOffsetY=-400}}
  {{visjs-node id=1 label='A' select=(action 'nodeClicked') color=nodeColor}}
  {{visjs-node id=2 label='B' select=(action 'nodeClicked') color=nodeColor}}
  {{visjs-node id=3 label='C'}}
  {{visjs-node id=4 label='D'}}
  {{visjs-node id=5 label='E'}}
  {{visjs-node id=6 label='F'}}
  {{visjs-node id=9 label='I'}}
  {{visjs-node id=10 label='J'}}
  {{visjs-node id=11 label='K'}}
  {{visjs-node id=12 label='L'}}
  {{visjs-edge from=1 to=2}}
  {{visjs-edge from=2 to=3}}
  {{visjs-edge from=1 to=3}}
  {{visjs-edge from=2 to=4}}
  {{visjs-edge from=12 to=3}}
  {{visjs-edge from=10 to=1}}
  {{visjs-edge from=5 to=12}}
  {{visjs-edge from=6 to=6}}
  {{visjs-edge from=11 to=4}}
  {{visjs-edge from=11 to=6}}
  {{visjs-edge from=9 to=2}}
  {{visjs-edge from=5 to=9}}
  {{visjs-edge from=6 to=10}}
  {{visjs-edge from=6 to=2}}
{{/visjs-network}}

<h5>Controller</h5>
<pre>  networkOptions: {
    nodes: {
      color: '#C7F110'
    }
  },
  nodeColor: '#FF0000',
  actions: {
    nodeClicked(nodeId) {
      this.set('nodeColor', `#${Math.floor(Math.random() * 16777215).toString(16)}`);
      console.log(`${nodeId} was clicked`);
    }
  }</pre>

<h5>Template</h5>
<pre>\{{#visjs-network options=networkOptions backgroundImage='wp.png' backgroundOffsetX=-600 backgroundOffsetY=-400}}
  \{{visjs-node id=1 label='A' select=(action 'nodeClicked') color=nodeColor}}
  \{{visjs-node id=2 label='B' select=(action 'nodeClicked') color=nodeColor}}
  \{{visjs-node id=3 label='C'}}
  ...
  \{{visjs-edge from=1 to=2}}
  \{{visjs-edge from=2 to=3}}
  ...
\{{/visjs-network}}</pre>

<h3>No Physics, Moveable positions &amp; Arrows</h3>

{{#visjs-network options=noPhysicsOptions}}
  {{visjs-node id=1 label='A' posX=0 posY=100}}
  {{visjs-node id=2 label='B' posX=bX posY=bY}}
  {{visjs-node id=3 label='C' posX=0 posY=0}}
  {{visjs-node id=4 label='D' posX=100 posY=0}}
  {{visjs-node id=5 label='E' posX=100 posY=100}}
  {{visjs-edge from=1 to=2 arrows='to'}}
  {{visjs-edge from=2 to=3 arrows='to'}}
  {{visjs-edge from=3 to=4 arrows='to'}}
  {{visjs-edge from=4 to=5 arrows='to'}}
  {{visjs-edge from=4 to=2 arrows='to'}}
  {{visjs-edge from=5 to=1 arrows='to'}}
{{/visjs-network}}

<h5>Controller</h5>
<pre>  noPhysicsOptions: {
    edges: {
      smooth: {
        type: 'discrete',
        forceDirection: 'none'
      }
    },
    physics:Â {
      enabled: false
    }
  },

  bX: 50,
  bY: 50,

  posOfBChanged: Ember.observer('bX', 'bY', function() {
    console.log(`B was moved to ${this.get('bX')}/${this.get('bY')}`);
  }),</pre>

<h5>Template</h5>
<pre>\{{#visjs-network options=noPhysicsOptions}}
  \{{visjs-node id=1 label='A' posX=0 posY=100}}
  \{{visjs-node id=2 label='B' posX=bX posY=bY}}
  \{{visjs-node id=3 label='C' posX=0 posY=0}}
  \{{visjs-node id=4 label='D' posX=100 posY=0}}
  \{{visjs-node id=5 label='E' posX=100 posY=100}}
  \{{visjs-edge from=1 to=2 arrows='to'}}
  \{{visjs-edge from=2 to=3 arrows='to'}}
  \{{visjs-edge from=3 to=4 arrows='to'}}
  \{{visjs-edge from=4 to=5 arrows='to'}}
  \{{visjs-edge from=4 to=2 arrows='to'}}
  \{{visjs-edge from=5 to=1 arrows='to'}}
\{{/visjs-network}}</pre>

<h3>Further Details</h3>

<dl>
  <dt>\{{visjs-node select=(action 'callback')}}</dt>
  <dd>The provided callback will receive 2 parameters: The first one being the id of the selected node, the second one being the raw event fired</dd>
</dl>
